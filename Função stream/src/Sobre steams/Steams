Stream: é uma sequência de elementos advinda de uma 
fonte de dados que oferece suporte a "operações agregadas"

--> Fonte de dados: Coleção, array, função de iteração, 
recurso de entrada e saída

Pipeline: Operações que são aplicadas as streams é composto por 0 ou mais operações 
intermediárias e uma terminal

Operação intermediária 

-->lazy
- Produz uma nova Stream(encadeamento)
- Só executa quando uma operação terminal é invocada

Operação terminal
- Produz um objeto não-stream(coleção ou outro)
- Determina o fim do processamento da stream

Operações intermediárias

-filter
-map
-flatmap
-peek
-distinct
-sorted
-skip
-limit(*)  
*short-circuit: é uma operação que delimita/retorna a quantidade de elementos que será retornado na consulta
O processamento termina quando o número especificado no limit é atingido(Ela corta a execução)

Opções terminais 

foreach
foreachordered
toArray
reduce
collect
min
max
count
anyMatch(*)
allMatch(*)
noneMatch(*)
findfirst(*)
findAny(*)

*short-circuit


Prof. Dr Nélio Alves

Mais sobre reduce:

Para entender como fazer uso da operação Stream.reduce(), vamos dividir os elementos participantes da operação:

Identidade - um elemento que é o valor inicial da operação de redução e o resultado padrão se o fluxo estiver vazio;

Acumulador - uma função que aceita dois parâmetros: um resultado parcial da operação de redução e o próximo elemento do fluxo;

Combinador - uma função usada para combinar o resultado parcial da operação de redução, quando a redução é paralelizada ou quando há uma incompatibilidade entre os tipos de argumentos do acumulador e os tipos de implementação do acumulador;

Link: https://receitasdecodigo.com.br/java/introducao-para-uso-do-stream-reduce
